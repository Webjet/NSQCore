using System;
using System.Text;
using System.Threading.Tasks;
using NSQCore.Commands;

namespace NSQCore
{
    /// <summary>
    /// A message delivered from NSQ.
    /// </summary>
    public class Message
    {
        /// <summary>
        /// The ID of the message, which is generated by nsqd.
        /// </summary>
        public string Id { get; }

        /// <summary>
        /// The number of times this message has been delivered to consumers.
        /// </summary>
        public short Attempts { get; }

        /// <summary>
        /// The nanosecond time the mssage was created in NSQ.
        /// </summary>
        public long Timestamp { get; }

        /// <summary>
        /// The body of the message.
        /// </summary>
        public MessageBody Body { get; }

        private readonly NsqTcpConnection _connection;

        private const int TimestampStart = 0;
        private const int TimestampCount = 8;
        private const int AttemptsStart = 8;
        private const int AttemptsCount = 2;
        private const int IdStart = 10;
        private const int IdCount = 16;
        private const int DataStart = TimestampCount + AttemptsCount + IdCount;

        internal Message(Frame frame, NsqTcpConnection connection)
        {
            _connection = connection;

            if (frame.Type != FrameType.Message)
                throw new ArgumentException("Frame must have FrameType 'Message'", "frame");

            if (BitConverter.IsLittleEndian)
            {
                Array.Reverse(frame.Data, TimestampStart, TimestampCount);
                Array.Reverse(frame.Data, AttemptsStart, AttemptsCount);
            }

            Timestamp = BitConverter.ToInt64(frame.Data, TimestampStart);
            Attempts = BitConverter.ToInt16(frame.Data, AttemptsStart);
            Id = Encoding.ASCII.GetString(frame.Data, IdStart, IdCount);

            // Data
            var dataLength = frame.Data.Length - DataStart;
            Body = new byte[dataLength];
            Array.ConstrainedCopy(frame.Data, DataStart, Body, 0, dataLength);
        }

        /// <summary>
        /// Finishes the message, which tells the nsqd instance the message has been processed.
        /// </summary>
        public Task FinishAsync()
        {
            return _connection.SendCommandAsync(new Finish(this));
        }

        /// <summary>
        /// Re-queues the message in NSQ so it will be delivered again to a consumer.
        /// </summary>
        public Task RequeueAsync()
        {
            return _connection.SendCommandAsync(new Requeue(this.Id));
        }

        /// <summary>
        /// Notifies NSQ that the message is still being processed. This prevents
        /// NSQ from re-queueing the message automatically.
        /// </summary>
        public Task TouchAsync()
        {
            throw new NotImplementedException();
        }
    }
}
